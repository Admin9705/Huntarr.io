; Script generated by Cascade for Huntarr.io

;--------------------------------
; Defines
;--------------------------------
!define APP_NAME "Huntarr"
!define APP_VERSION "1.0.0" ; You can fetch this from a file or git tag later
!define APP_PUBLISHER "Huntarr Team"
!define APP_WEBSITE "https://github.com/Huntarr/Huntarr.io"
!define APP_UNINSTALL_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APP_NAME}"
!define DOCKER_IMAGE_NAME "ghcr.io/huntarr/huntarr:latest" ; !!! REPLACE with your actual image name !!!
!define CONTAINER_NAME "huntarr-app"
!define HOST_PORT "58888" ; Port on the Windows host to access Huntarr
!define CONTAINER_PORT "9705" ; Port Huntarr listens on inside the container

;--------------------------------
; General
;--------------------------------
Name "${APP_NAME} ${APP_VERSION}"
OutFile "Huntarr-Installer-${APP_VERSION}.exe"
InstallDir "$PROGRAMFILES64\${APP_NAME}"
InstallDirRegKey HKCU "${APP_UNINSTALL_KEY}" "InstallLocation"
RequestExecutionLevel admin ; Required for Program Files and Docker interactions

; Branding - Add your icon here
; MUI_ICON "path\to\your\icon.ico"
; MUI_UNICON "path\to\your\unicon.ico"

;--------------------------------
; Variables
;--------------------------------
Var ConfigDir

;--------------------------------
; Pages
;--------------------------------
Page license CustomLicensePage
Page directory "InstallDirPage" "Installation Directory" "Select the directory to install ${APP_NAME}." "$INSTDIR" 
PageEx custom CustomConfigDirPage
  PageCallbacks CustomConfigDirPageCreate CustomConfigDirPageLeave
PageExEnd
Page instfiles

UninstPage uninstConfirm
UninstPage instfiles

;--------------------------------
; Custom Page Functions for Config Directory
;--------------------------------
Function CustomLicensePage
  !insertmacro MUI_PAGE_WELCOME
  ; Placeholder for actual license page if needed
  ; For now, just a welcome message that moves to next step
  GetFunctionAddress $R0 CustomLicensePageLeave
  nsDialogs::Create /NOUNLOAD 1018
  Pop $R1 ; HWND

  ${NSD_CreateLabel} 0 0 100% 12u "Welcome to the ${APP_NAME} Installer."
  Pop $R2

  ${NSD_CreateLabel} 0 20u 100% 24u "This installer will guide you through the setup of ${APP_NAME}.\nIt requires Docker Desktop to be installed and running on your system."
  Pop $R3
  
  nsDialogs::Show
FunctionEnd

Function CustomLicensePageLeave
  ; Add license validation here if you implement a real license page
FunctionEnd

Function CustomConfigDirPageCreate
  nsDialogs::Create 1018
  Pop $0

  ${NSD_CreateLabel} 0 0 100% 12u "Configuration Directory"
  ${NSD_CreateLabel} 0 20u 100% 24u "Select a directory where ${APP_NAME} will store its configuration and data. This data will persist even if you reinstall ${APP_NAME}."
  
  ${NSD_CreateLabel} 0 50u 30u 12u "Config Path:"
  ${NSD_CreateBrowseEntry} 35u 50u 60% 12u "$LOCALAPPDATA\${APP_NAME}\Config"
  Pop $ConfigDir
  
  nsDialogs::Show
FunctionEnd

Function CustomConfigDirPageLeave
  ${NSD_GetText} $ConfigDir $R0
  StrCpy $ConfigDir $R0
  IfErrors 0 +2
    MessageBox MB_OK "Invalid configuration directory."
    Abort
FunctionEnd

;--------------------------------
; Sections
;--------------------------------
Section "Install ${APP_NAME}" SEC_INSTALL
  SetOutPath "$INSTDIR"
  
  ; Create the chosen configuration directory
  CreateDirectory "$ConfigDir"
  IfErrors +2 0
    MessageBox MB_ICONSTOP "Could not create configuration directory: $ConfigDir. Please check permissions or choose another location." /SD IDOK
    Abort "Failed to create config directory"

  ; Write the run-huntarr.bat script
  SetOutPath "$INSTDIR"
  FileOpen $0 "$INSTDIR\run-huntarr.bat" w
  FileWrite $0 '@echo off$\r$\n'
  FileWrite $0 'echo Checking for Docker...$\r$\n'
  FileWrite $0 'docker version > nul 2>&1$\r$\n'
  FileWrite $0 'if %errorlevel% neq 0 ($\r$\n'
  FileWrite $0 '  echo Docker is not running or not installed. Please start Docker Desktop and try again.$\r$\n'
  FileWrite $0 '  pause$\r$\n'
  FileWrite $0 '  exit /b 1$\r$\n'
  FileWrite $0 ')$\r$\n$\r$\n'
  FileWrite $0 'echo Pulling latest Huntarr image (${DOCKER_IMAGE_NAME})...$\r$\n'
  FileWrite $0 'docker pull ${DOCKER_IMAGE_NAME}$\r$\n$\r$\n'
  FileWrite $0 'echo Stopping and removing existing Huntarr container (${CONTAINER_NAME})...$\r$\n'
  FileWrite $0 'docker stop ${CONTAINER_NAME} > nul 2>&1$\r$\n'
  FileWrite $0 'docker rm ${CONTAINER_NAME} > nul 2>&1$\r$\n$\r$\n'
  FileWrite $0 'echo Starting Huntarr container (${CONTAINER_NAME})...$\r$\n'
  FileWrite $0 'set CONFIG_PATH_WIN="$ConfigDir"$\r$\n'
  FileWrite $0 'docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} -v "%CONFIG_PATH_WIN%":/config -v /var/run/docker.sock:/var/run/docker.sock --restart unless-stopped ${DOCKER_IMAGE_NAME}$\r$\n$\r$\n'
  FileWrite $0 'if %errorlevel% neq 0 ($\r$\n'
  FileWrite $0 '  echo Failed to start Huntarr container. Check Docker logs for details.$\r$\n'
  FileWrite $0 '  pause$\r$\n'
  FileWrite $0 '  exit /b 1$\r$\n'
  FileWrite $0 ')$\r$\n$\r$\n'
  FileWrite $0 'echo ${APP_NAME} is starting. It might take a moment to be accessible at http://localhost:${HOST_PORT}$\r$\n'
  FileWrite $0 '; timeout /t 5 /nobreak > nul ; Optional: wait a few seconds before opening browser $\r$\n'
  FileWrite $0 '; start http://localhost:${HOST_PORT} ; Optional: auto-open in browser $\r$\n'
  FileWrite $0 'echo You can close this window. Huntarr will continue running in the background via Docker.'
  FileClose $0

  ; Create Shortcuts
  CreateDirectory "$SMPROGRAMS\${APP_NAME}"
  CreateShortCut "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk" "$INSTDIR\run-huntarr.bat"
  CreateShortCut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\run-huntarr.bat"
  CreateShortCut "$SMPROGRAMS\${APP_NAME}\Uninstall ${APP_NAME}.lnk" "$INSTDIR\Uninstall.exe"

  ; Write Uninstaller
  WriteUninstaller "$INSTDIR\Uninstall.exe"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "DisplayName" "${APP_NAME}"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "UninstallString" "$\"$INSTDIR\Uninstall.exe$\""
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "DisplayIcon" "$\"$INSTDIR\run-huntarr.bat$\",0" ; Better to use an actual icon
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "DisplayVersion" "${APP_VERSION}"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "Publisher" "${APP_PUBLISHER}"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "URLInfoAbout" "${APP_WEBSITE}"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegStr HKCU "${APP_UNINSTALL_KEY}" "ConfigLocation" "$ConfigDir" ; Store config location for reference
SectionEnd

;--------------------------------
; Uninstaller Section
;--------------------------------
Section "Uninstall" SEC_UNINSTALL
  ; Stop and remove Docker container
  DetailPrint "Stopping and removing Huntarr Docker container (${CONTAINER_NAME})..."
  ExecWait 'docker stop ${CONTAINER_NAME}'
  ExecWait 'docker rm ${CONTAINER_NAME}'
  ; Note: We don't remove the Docker image ${DOCKER_IMAGE_NAME} automatically
  ; Note: We don't remove the $ConfigDir automatically, as it contains user data.
  ; Add a messagebox to ask user if they want to remove config data if desired.

  Delete "$SMPROGRAMS\${APP_NAME}\${APP_NAME}.lnk"
  Delete "$DESKTOP\${APP_NAME}.lnk"
  Delete "$SMPROGRAMS\${APP_NAME}\Uninstall ${APP_NAME}.lnk"
  RMDir "$SMPROGRAMS\${APP_NAME}"
  
  Delete "$INSTDIR\run-huntarr.bat"
  Delete "$INSTDIR\Uninstall.exe"
  RMDir "$INSTDIR"
  
  DeleteRegKey HKCU "${APP_UNINSTALL_KEY}"
SectionEnd

;--------------------------------
; MUI Language Configuration (example for English)
;--------------------------------
!insertmacro MUI_LANGUAGE "English"

;--------------------------------
; Helper Functions / Macros (if needed)
;--------------------------------
; Example of checking for Docker (can be more robust)
Function CheckDockerInstalled
  ; This is a basic check. A more robust check might involve checking registry or specific file paths.
  ReadRegStr $R0 HKLM "SOFTWARE\Docker Inc.\Docker" "InstallPath"
  IfErrors DockerNotInstalled DockerInstalled
  DockerInstalled:
    StrCpy $R0 "found"
    Goto DockerCheckEnd
  DockerNotInstalled:
    StrCpy $R0 "notfound"
  DockerCheckEnd:
  Push $R0
FunctionEnd

; PageEx InstallDirPage customization if needed
; Function InstallDirPage
;   !insertmacro MUI_PAGE_DIRECTORY
; FunctionEnd
